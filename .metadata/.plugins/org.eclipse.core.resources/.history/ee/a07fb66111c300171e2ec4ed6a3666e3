import BinaryTree.Node;

/*************************************************************************
 *  Binary Search Tree class.
 *  Adapted from Sedgewick and Wayne.
 *
 *  @version 3.0 1/11/15 16:49:42
 *
 *  @author Neil Simon
 *
 *************************************************************************/

public class DAG<Key extends Comparable<Key>, Value> {
    private Node root;             // root of BST

    /**
     * Private node class.
     */
    private class Node {
        private Key key;           // sorted by key
        private Value val;         // associated data
        private Node parent;
        private Node[] children;   // subtrees

        public Node(Key key, Value val) {
            this.key = key;
            this.val = val;
            this.children[0] = null;
        }
    }
    
    /**
     *  Search BST for given key.
     *  What is the value associated with given key?
     *
     *  @param key the search key
     *  @return value associated with the given key if found, or null if no such key exists.
     */
    public Value get(Key key) 
    { 
    	return get(root, key);
    }

    private Value get(Node x, Key key)
    {
        if (x == null) return null;
        if (x.key == key) return x;
        int cmp = key.compareTo(x.key);
        if      (cmp < 0) return get(x.left, key);
        else if (cmp > 0) return get(x.right, key);
        else              return x.val;
    }

    /**
     *  Insert key-value pair into BST.
     *  If key already exists, update with new value.
     *
     *  @param key the key to insert
     *  @param val the value associated with key
     */
    public void addChild(Key key, Value val) 
    {
        root = addChild(root, key, val);
    }

    private Node addChild(Node x, Key key, Value val) 
    {
        if (x == null) return new Node(key, val);
        int cmp = key.compareTo(x.key);
        if (cmp < 0)
        {
        	x.parent = new Node(key, val);
        	x = x.parent;
        }
        else if (cmp > 0)
        {
        	boolean notFilled = true;
        	int index = 0;
        	while(notFilled)
        	{
        		if (x.children[index] == null)
            	{
            		x.children[index] = new Node(key, val);
            		x.children[index+1] = null;
            		notFilled = false;
            	}
        		index++;
        	}
        }
        else
        {
        	x.val = val;
        }

        return x;
    }
    
 
}
